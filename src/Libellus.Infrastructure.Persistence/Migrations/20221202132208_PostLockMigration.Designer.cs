// <auto-generated />
using System;
using Libellus.Infrastructure.Persistence.DataModels.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Libellus.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221202132208_PostLockMigration")]
    partial class PostLockMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("libellus")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Libellus.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("asp_net_roles", "libellus_security");
                });

            modelBuilder.Entity("Libellus.Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_picture_id");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<ZonedDateTime>("created_on_utc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("asp_net_users", "libellus_security");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid?>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id")
                        .HasColumnOrder(3);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(2);

                    b.Property<string>("FriendlyId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("author_friendly_id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(1);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name")
                        .HasColumnOrder(6);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(7);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id")
                        .HasName("pk_author");

                    b.HasAlternateKey("FriendlyId")
                        .HasName("ak_author_author_friendly_id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_author_creator_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_author_group_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_author_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_author_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.ToTable("author", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid?>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id")
                        .HasColumnOrder(3);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(5);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(2);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasColumnOrder(9);

                    b.Property<string>("FriendlyId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("book_friendly_id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("LiteratureFormId")
                        .HasColumnType("uuid")
                        .HasColumnName("literature_form_id")
                        .HasColumnOrder(4);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(6);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title", "Description" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title", "Description" });

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title")
                        .HasColumnOrder(7);

                    b.Property<string>("TitleNormalized")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title_normalized")
                        .HasColumnOrder(8);

                    b.HasKey("Id")
                        .HasName("pk_book");

                    b.HasAlternateKey("FriendlyId")
                        .HasName("ak_book_book_friendly_id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_book_creator_id");

                    b.HasIndex("LiteratureFormId")
                        .HasDatabaseName("ix_book_literature_form_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_book_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_book_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("GroupId", "Id", "LiteratureFormId")
                        .HasDatabaseName("ix_book_group_id_book_id_literature_form_id");

                    b.HasIndex("GroupId", "Id", "TitleNormalized")
                        .HasDatabaseName("ix_book_group_id_book_id_title_normalized");

                    b.ToTable("book", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookAuthorConnector", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id")
                        .HasColumnOrder(0);

                    b.HasKey("BookId", "AuthorId")
                        .HasName("pk_book_author_connector");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_book_author_connector_author_id");

                    b.ToTable("book_author_connector", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookEdition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("book_edition_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id")
                        .HasColumnOrder(4);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(16);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasColumnOrder(20);

                    b.Property<Guid?>("FormatId")
                        .HasColumnType("uuid")
                        .HasColumnName("format_id")
                        .HasColumnOrder(5);

                    b.Property<string>("FriendlyId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("book_edition_friendly_id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsTranslation")
                        .HasColumnType("boolean")
                        .HasColumnName("is_translation")
                        .HasColumnOrder(15);

                    b.Property<string>("Isbn")
                        .HasColumnType("text")
                        .HasColumnName("isbn")
                        .HasColumnOrder(14);

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uuid")
                        .HasColumnName("language_id")
                        .HasColumnOrder(6);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(17);

                    b.Property<int?>("PageCount")
                        .HasColumnType("integer")
                        .HasColumnName("page_count")
                        .HasColumnOrder(12);

                    b.Property<Instant?>("PublishedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_on")
                        .HasColumnOrder(11);

                    b.Property<int?>("PublishedOnDay")
                        .HasColumnType("integer")
                        .HasColumnName("published_on_day")
                        .HasColumnOrder(10);

                    b.Property<int?>("PublishedOnMonth")
                        .HasColumnType("integer")
                        .HasColumnName("published_on_month")
                        .HasColumnOrder(9);

                    b.Property<int?>("PublishedOnYear")
                        .HasColumnType("integer")
                        .HasColumnName("published_on_year")
                        .HasColumnOrder(8);

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id")
                        .HasColumnOrder(7);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title", "Description" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title", "Description" });

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title")
                        .HasColumnOrder(18);

                    b.Property<string>("TitleNormalized")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title_normalized")
                        .HasColumnOrder(19);

                    b.Property<int?>("WordCount")
                        .HasColumnType("integer")
                        .HasColumnName("word_count")
                        .HasColumnOrder(13);

                    b.HasKey("Id")
                        .HasName("pk_book_edition");

                    b.HasAlternateKey("FriendlyId")
                        .HasName("ak_book_edition_book_edition_friendly_id");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_edition_book_id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_book_edition_creator_id");

                    b.HasIndex("FormatId")
                        .HasDatabaseName("ix_book_edition_format_id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_book_edition_language_id");

                    b.HasIndex("PublisherId")
                        .HasDatabaseName("ix_book_edition_publisher_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_book_edition_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_book_edition_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("Id", "PublishedOn")
                        .HasDatabaseName("ix_book_edition_book_edition_id_published_on");

                    b.HasIndex("GroupId", "Id", "FormatId")
                        .HasDatabaseName("ix_book_edition_group_id_book_edition_id_format_id");

                    b.HasIndex("GroupId", "Id", "Isbn")
                        .HasDatabaseName("ix_book_edition_group_id_book_edition_id_isbn");

                    b.HasIndex("GroupId", "Id", "LanguageId")
                        .HasDatabaseName("ix_book_edition_group_id_book_edition_id_language_id");

                    b.HasIndex("GroupId", "Id", "PublisherId")
                        .HasDatabaseName("ix_book_edition_group_id_book_edition_id_publisher_id");

                    b.HasIndex("GroupId", "Id", "TitleNormalized")
                        .HasDatabaseName("ix_book_edition_group_id_book_edition_id_title_normalized");

                    b.ToTable("book_edition", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookGenreConnector", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id")
                        .HasColumnOrder(0);

                    b.HasKey("BookId", "GenreId")
                        .HasName("pk_book_genre_connector");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("ix_book_genre_connector_genre_id");

                    b.ToTable("book_genre_connector", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookSeriesConnector", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id")
                        .HasColumnOrder(0);

                    b.Property<decimal>("NumberInSeries")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("number_in_series")
                        .HasColumnOrder(1);

                    b.HasKey("BookId", "SeriesId")
                        .HasName("pk_book_series_connector");

                    b.HasIndex("BookId")
                        .IsUnique()
                        .HasDatabaseName("ix_book_series_connector_book_id");

                    b.HasIndex("SeriesId")
                        .HasDatabaseName("ix_book_series_connector_series_id");

                    b.ToTable("book_series_connector", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookTagConnector", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id")
                        .HasColumnOrder(0);

                    b.HasKey("BookId", "TagId")
                        .HasName("pk_book_tag_connector");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_book_tag_connector_tag_id");

                    b.ToTable("book_tag_connector", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookWarningTagConnector", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid>("WarningTagId")
                        .HasColumnType("uuid")
                        .HasColumnName("warning_tag_id")
                        .HasColumnOrder(0);

                    b.HasKey("BookId", "WarningTagId")
                        .HasName("pk_book_warning_tag_connector");

                    b.HasIndex("WarningTagId")
                        .HasDatabaseName("ix_book_warning_tag_connector_warning_tag_id");

                    b.ToTable("book_warning_tag_connector", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(5);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(2);

                    b.Property<string>("FriendlyId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("comment_friendly_id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(1);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(6);

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("RepliedToId")
                        .HasColumnType("uuid")
                        .HasColumnName("replied_to_id")
                        .HasColumnOrder(4);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("text")
                        .HasColumnOrder(7);

                    b.HasKey("Id")
                        .HasName("pk_comment");

                    b.HasAlternateKey("FriendlyId")
                        .HasName("ak_comment_comment_friendly_id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_comment_creator_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_comment_group_id");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_comment_post_id");

                    b.HasIndex("RepliedToId")
                        .HasDatabaseName("ix_comment_replied_to_id");

                    b.ToTable("comment", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.CoverImageMetaData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("cover_image_meta_data_id")
                        .HasColumnOrder(-1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(5);

                    b.Property<int>("DataSize")
                        .HasColumnType("integer")
                        .HasColumnName("data_size")
                        .HasColumnOrder(4);

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height")
                        .HasColumnOrder(2);

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("mime_type")
                        .HasColumnOrder(3);

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("object_name")
                        .HasColumnOrder(6);

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(0);

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width")
                        .HasColumnOrder(1);

                    b.HasKey("Id")
                        .HasName("pk_cover_image_meta_data");

                    b.HasIndex("ObjectName")
                        .IsUnique()
                        .HasDatabaseName("ix_cover_image_meta_data_object_name");

                    b.HasIndex("PublicId", "Id")
                        .HasDatabaseName("ix_cover_image_meta_data_public_id_cover_image_meta_data_id");

                    b.ToTable("cover_image_meta_data", "libellus_media");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Format", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("format_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsDigital")
                        .HasColumnType("boolean")
                        .HasColumnName("is_digital")
                        .HasColumnOrder(2);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(5);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(6);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id")
                        .HasName("pk_format");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_format_creator_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_format_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_format_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("GroupId", "NameNormalized")
                        .IsUnique()
                        .HasDatabaseName("ix_format_group_id_name_normalized");

                    b.ToTable("format", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsFiction")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fiction")
                        .HasColumnOrder(2);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(5);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(6);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id")
                        .HasName("pk_genre");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_genre_creator_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_genre_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_genre_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("GroupId", "NameNormalized")
                        .IsUnique()
                        .HasDatabaseName("ix_genre_group_id_name_normalized");

                    b.ToTable("genre", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(2);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasColumnOrder(6);

                    b.Property<string>("FriendlyId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("group_friendly_id")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private")
                        .HasColumnOrder(1);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name")
                        .HasColumnOrder(4);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(5);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id")
                        .HasName("pk_group");

                    b.HasAlternateKey("FriendlyId")
                        .HasName("ak_group_group_friendly_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_group_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_group_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("Id", "NameNormalized")
                        .HasDatabaseName("ix_group_group_id_name_normalized");

                    b.ToTable("group", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.GroupRole", b =>
                {
                    b.Property<Guid>("GroupRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("group_role_id")
                        .HasColumnOrder(-1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name")
                        .HasColumnOrder(0);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(1);

                    b.HasKey("GroupRoleId")
                        .HasName("pk_group_role");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_group_role_name");

                    b.HasIndex("GroupRoleId", "Name")
                        .HasDatabaseName("ix_group_role_group_role_id_name");

                    b.ToTable("group_role", "libellus_security");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.GroupUserMembership", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasColumnOrder(0);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(2);

                    b.Property<Guid>("GroupRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_role_id")
                        .HasColumnOrder(1);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(3);

                    b.HasKey("GroupId", "UserId")
                        .HasName("pk_group_user_membership");

                    b.HasIndex("GroupRoleId")
                        .HasDatabaseName("ix_group_user_membership_group_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_group_user_membership_user_id");

                    b.ToTable("group_user_membership", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("invitation_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(4);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<int>("InvitationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("invitation_status")
                        .HasColumnOrder(3);

                    b.Property<Guid>("InviteeId")
                        .HasColumnType("uuid")
                        .HasColumnName("invitee_id")
                        .HasColumnOrder(2);

                    b.Property<Guid>("InviterId")
                        .HasColumnType("uuid")
                        .HasColumnName("inviter_id")
                        .HasColumnOrder(1);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(5);

                    b.HasKey("Id")
                        .HasName("pk_invitation");

                    b.HasIndex("InviterId")
                        .HasDatabaseName("ix_invitation_inviter_id");

                    b.HasIndex("GroupId", "Id")
                        .HasDatabaseName("ix_invitation_group_id_invitation_id");

                    b.HasIndex("Id", "InvitationStatus")
                        .HasDatabaseName("ix_invitation_invitation_id_invitation_status")
                        .HasFilter("invitation_status = 1");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "InvitationStatus"), new[] { "CreatedOnUtc" });

                    b.HasIndex("InviteeId", "Id")
                        .HasDatabaseName("ix_invitation_invitee_id_invitation_id");

                    b.ToTable("invitation", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.InvitationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("invitation_request_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(3);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<int>("InvitationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("invitation_status")
                        .HasColumnOrder(2);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(4);

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uuid")
                        .HasColumnName("requester_id")
                        .HasColumnOrder(1);

                    b.HasKey("Id")
                        .HasName("pk_invitation_request");

                    b.HasIndex("RequesterId")
                        .HasDatabaseName("ix_invitation_request_requester_id");

                    b.HasIndex("GroupId", "Id")
                        .HasDatabaseName("ix_invitation_request_group_id_invitation_request_id");

                    b.HasIndex("Id", "InvitationStatus")
                        .HasDatabaseName("ix_invitation_request_invitation_request_id_invitation_status")
                        .HasFilter("invitation_status = 1");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "InvitationStatus"), new[] { "CreatedOnUtc" });

                    b.ToTable("invitation_request", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("label_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(3);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(4);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id")
                        .HasName("pk_label");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_label_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_label_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("GroupId", "NameNormalized")
                        .IsUnique()
                        .HasDatabaseName("ix_label_group_id_name_normalized");

                    b.ToTable("label", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("language_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(4);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(5);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id")
                        .HasName("pk_language");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_language_creator_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_language_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_language_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("GroupId", "NameNormalized")
                        .IsUnique()
                        .HasDatabaseName("ix_language_group_id_name_normalized");

                    b.ToTable("language", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.LiteratureForm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("literature_form_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(5);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(6);

                    b.Property<decimal>("ScoreMultiplier")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("score_multiplier")
                        .HasColumnOrder(4);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id")
                        .HasName("pk_literature_form");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_literature_form_creator_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_literature_form_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_literature_form_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("GroupId", "NameNormalized")
                        .IsUnique()
                        .HasDatabaseName("ix_literature_form_group_id_name_normalized");

                    b.ToTable("literature_form", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.LockedPost", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("LockCreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("lock_creator_id")
                        .HasColumnOrder(0);

                    b.Property<string>("LockReason")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("lock_reason")
                        .HasColumnOrder(1);

                    b.HasKey("PostId")
                        .HasName("pk_locked_post");

                    b.HasIndex("LockCreatorId")
                        .HasDatabaseName("ix_locked_post_lock_creator_id");

                    b.ToTable("locked_post", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("note_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(4);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("text")
                        .HasColumnOrder(2);

                    b.HasKey("Id")
                        .HasName("pk_note");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_note_creator_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_note_group_id");

                    b.ToTable("note", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(6);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(2);

                    b.Property<string>("FriendlyId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("post_friendly_id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsMemberOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_member_only")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsSpoiler")
                        .HasColumnType("boolean")
                        .HasColumnName("is_spoiler")
                        .HasColumnOrder(5);

                    b.Property<Guid?>("LabelId")
                        .HasColumnType("uuid")
                        .HasColumnName("label_id")
                        .HasColumnOrder(3);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(7);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title", "Text" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title", "Text" });

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("text")
                        .HasColumnOrder(10);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title")
                        .HasColumnOrder(8);

                    b.Property<string>("TitleNormalized")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title_normalized")
                        .HasColumnOrder(9);

                    b.HasKey("Id")
                        .HasName("pk_post");

                    b.HasAlternateKey("FriendlyId")
                        .HasName("ak_post_post_friendly_id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_post_creator_id");

                    b.HasIndex("LabelId")
                        .HasDatabaseName("ix_post_label_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_post_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_post_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("TitleNormalized")
                        .HasDatabaseName("ix_post_title_normalized")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TitleNormalized"), "GIN");

                    b.HasIndex("GroupId", "TitleNormalized")
                        .HasDatabaseName("ix_post_group_id_title_normalized");

                    b.HasIndex("GroupId", "Id", "LabelId")
                        .HasDatabaseName("ix_post_group_id_post_id_label_id");

                    b.ToTable("post", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.ProfilePictureMetaData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("profile_picture_meta_data_id")
                        .HasColumnOrder(-1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(5);

                    b.Property<int>("DataSize")
                        .HasColumnType("integer")
                        .HasColumnName("data_size")
                        .HasColumnOrder(4);

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height")
                        .HasColumnOrder(2);

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("mime_type")
                        .HasColumnOrder(3);

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("object_name")
                        .HasColumnOrder(6);

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(0);

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width")
                        .HasColumnOrder(1);

                    b.HasKey("Id")
                        .HasName("pk_profile_picture_meta_data");

                    b.HasIndex("ObjectName")
                        .IsUnique()
                        .HasDatabaseName("ix_profile_picture_meta_data_object_name");

                    b.HasIndex("PublicId", "Id")
                        .HasDatabaseName("ix_profile_picture_meta_data_public_id_profile_picture_meta_da");

                    b.ToTable("profile_picture_meta_data", "libellus_media");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(4);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(5);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id")
                        .HasName("pk_publisher");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_publisher_creator_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_publisher_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_publisher_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("GroupId", "NameNormalized")
                        .IsUnique()
                        .HasDatabaseName("ix_publisher_group_id_name_normalized");

                    b.ToTable("publisher", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Reading", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("reading_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid>("BookEditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_edition_id")
                        .HasColumnOrder(3);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(2);

                    b.Property<ZonedDateTime?>("FinishedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_on_utc")
                        .HasColumnOrder(9);

                    b.Property<string>("FriendlyId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("reading_friendly_id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDnf")
                        .HasColumnType("boolean")
                        .HasColumnName("is_dnf")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsReread")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reread")
                        .HasColumnOrder(6);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("note_id")
                        .HasColumnOrder(4);

                    b.Property<double?>("Score")
                        .HasPrecision(7, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("score")
                        .HasColumnOrder(7);

                    b.Property<ZonedDateTime?>("StartedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_on_utc")
                        .HasColumnOrder(8);

                    b.HasKey("Id")
                        .HasName("pk_reading");

                    b.HasAlternateKey("FriendlyId")
                        .HasName("ak_reading_reading_friendly_id");

                    b.HasIndex("BookEditionId")
                        .HasDatabaseName("ix_reading_book_edition_id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_reading_creator_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_reading_group_id");

                    b.HasIndex("NoteId")
                        .IsUnique()
                        .HasDatabaseName("ix_reading_note_id");

                    b.ToTable("reading", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Series", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(2);

                    b.Property<string>("FriendlyId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("series_friendly_id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(1);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(4);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title" });

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title")
                        .HasColumnOrder(5);

                    b.Property<string>("TitleNormalized")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title_normalized")
                        .HasColumnOrder(6);

                    b.HasKey("Id")
                        .HasName("pk_series");

                    b.HasAlternateKey("FriendlyId")
                        .HasName("ak_series_series_friendly_id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_series_creator_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_series_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_series_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("TitleNormalized")
                        .HasDatabaseName("ix_series_title_normalized")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TitleNormalized"), "GIN");

                    b.HasIndex("GroupId", "TitleNormalized")
                        .HasDatabaseName("ix_series_group_id_title_normalized");

                    b.ToTable("series", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Shelf", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("shelf_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(2);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasColumnOrder(8);

                    b.Property<string>("FriendlyId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("shelf_friendly_id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked")
                        .HasColumnOrder(5);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name")
                        .HasColumnOrder(6);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(7);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id")
                        .HasName("pk_shelf");

                    b.HasAlternateKey("FriendlyId")
                        .HasName("ak_shelf_shelf_friendly_id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_shelf_creator_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_shelf_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_shelf_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("GroupId", "NameNormalized")
                        .IsUnique()
                        .HasDatabaseName("ix_shelf_group_id_name_normalized");

                    b.ToTable("shelf", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.ShelfBookConnector", b =>
                {
                    b.Property<Guid>("ShelfId")
                        .HasColumnType("uuid")
                        .HasColumnName("shelf_id")
                        .HasColumnOrder(-1);

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id")
                        .HasColumnOrder(0);

                    b.HasKey("ShelfId", "BookId")
                        .HasName("pk_shelf_book_connector");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_shelf_book_connector_book_id");

                    b.ToTable("shelf_book_connector", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(4);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(5);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id")
                        .HasName("pk_tag");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_tag_creator_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_tag_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_tag_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("GroupId", "NameNormalized")
                        .IsUnique()
                        .HasDatabaseName("ix_tag_group_id_name_normalized");

                    b.ToTable("tag", "libellus_social");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.WarningTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("warning_tag_id")
                        .HasColumnOrder(-1);

                    b.Property<ZonedDateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasColumnOrder(0);

                    b.Property<ZonedDateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasColumnOrder(4);

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_normalized")
                        .HasColumnOrder(5);

                    b.Property<NpgsqlTsVector>("SearchVectorCustom")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_custom")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<NpgsqlTsVector>("SearchVectorSimple")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector_simple")
                        .HasAnnotation("Npgsql:TsVectorConfig", "simple")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id")
                        .HasName("pk_warning_tag");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_warning_tag_creator_id");

                    b.HasIndex("SearchVectorCustom")
                        .HasDatabaseName("ix_warning_tag_search_vector_custom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorCustom"), "GIN");

                    b.HasIndex("SearchVectorSimple")
                        .HasDatabaseName("ix_warning_tag_search_vector_simple");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVectorSimple"), "GIN");

                    b.HasIndex("GroupId", "NameNormalized")
                        .IsUnique()
                        .HasDatabaseName("ix_warning_tag_group_id_name_normalized");

                    b.ToTable("warning_tag", "libellus_social");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<Libellus.Domain.Common.Types.Ids.UserId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims", "libellus_security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<Libellus.Domain.Common.Types.Ids.UserId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims", "libellus_security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<Libellus.Domain.Common.Types.Ids.UserId>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins", "libellus_security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<Libellus.Domain.Common.Types.Ids.UserId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles", "libellus_security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<Libellus.Domain.Common.Types.Ids.UserId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens", "libellus_security");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Author", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_author_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_groups_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Book", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_book_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_groups_group_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.LiteratureForm", "LiteratureForm")
                        .WithMany("Books")
                        .HasForeignKey("LiteratureFormId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_book_literature_forms_literature_form_id");

                    b.Navigation("Group");

                    b.Navigation("LiteratureForm");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookAuthorConnector", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Author", "Author")
                        .WithMany("BookAuthorConnectors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_author_connector_author_author_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Book", "Book")
                        .WithMany("BookAuthorConnectors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_author_connector_books_book_id");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookEdition", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Book", "Book")
                        .WithMany("BookEditions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_edition_book_book_id");

                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_book_edition_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Format", "Format")
                        .WithMany("BookEditions")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_book_edition_formats_format_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_edition_groups_group_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Language", "Language")
                        .WithMany("BookEditions")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_book_edition_languages_language_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Publisher", "Publisher")
                        .WithMany("BookEditions")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_book_edition_publishers_publisher_id");

                    b.Navigation("Book");

                    b.Navigation("Format");

                    b.Navigation("Group");

                    b.Navigation("Language");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookGenreConnector", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Book", "Book")
                        .WithMany("BookGenreConnectors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_genre_connector_book_book_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Genre", "Genre")
                        .WithMany("BookGenreConnectors")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_genre_connector_genres_genre_id");

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookSeriesConnector", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Book", "Book")
                        .WithOne("BookSeriesConnector")
                        .HasForeignKey("Libellus.Infrastructure.Persistence.DataModels.BookSeriesConnector", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_connector_book_book_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Series", "Series")
                        .WithMany("BookSeriesConnectors")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_series_connector_series_series_id");

                    b.Navigation("Book");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookTagConnector", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Book", "Book")
                        .WithMany("BookTagConnectors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_tag_connector_book_book_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Tag", "Tag")
                        .WithMany("BookTagConnectors")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_tag_connector_tags_tag_id");

                    b.Navigation("Book");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookWarningTagConnector", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Book", "Book")
                        .WithMany("BookWarningTagConnectors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_warning_tag_connector_book_book_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.WarningTag", "WarningTag")
                        .WithMany("BookWarningTagConnectors")
                        .HasForeignKey("WarningTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_warning_tag_connector_warning_tags_warning_tag_id");

                    b.Navigation("Book");

                    b.Navigation("WarningTag");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Comment", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_asp_net_users_creator_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_groups_group_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_posts_post_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Comment", "RepliedTo")
                        .WithMany()
                        .HasForeignKey("RepliedToId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_comment_comment_replied_to_id");

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Post");

                    b.Navigation("RepliedTo");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Format", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_format_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_format_groups_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Genre", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_genre_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_genre_groups_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.GroupUserMembership", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_user_membership_group_group_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.GroupRole", "GroupRole")
                        .WithMany("GroupUserMemberships")
                        .HasForeignKey("GroupRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_user_membership_group_role_group_role_id");

                    b.HasOne("Libellus.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_user_membership_asp_net_users_user_id");

                    b.Navigation("Group");

                    b.Navigation("GroupRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Invitation", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitation_group_group_id");

                    b.HasOne("Libellus.Domain.Entities.Identity.User", "Invitee")
                        .WithMany()
                        .HasForeignKey("InviteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitation_asp_net_users_invitee_id");

                    b.HasOne("Libellus.Domain.Entities.Identity.User", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitation_asp_net_users_inviter_id");

                    b.Navigation("Group");

                    b.Navigation("Invitee");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.InvitationRequest", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitation_request_group_group_id");

                    b.HasOne("Libellus.Domain.Entities.Identity.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitation_request_asp_net_users_requester_id");

                    b.Navigation("Group");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Label", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany("Labels")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_label_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Language", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_language_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_language_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.LiteratureForm", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_literature_form_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_literature_form_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.LockedPost", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", "LockCreator")
                        .WithMany()
                        .HasForeignKey("LockCreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_locked_post_asp_net_users_lock_creator_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Post", "Post")
                        .WithOne("LockedPost")
                        .HasForeignKey("Libellus.Infrastructure.Persistence.DataModels.LockedPost", "PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locked_post_posts_post_id");

                    b.Navigation("LockCreator");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Note", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_note_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_note_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Post", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_post_asp_net_users_creator_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_group_group_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Label", "Label")
                        .WithMany("Posts")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_post_label_label_id");

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Publisher", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_publisher_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publisher_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Reading", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.BookEdition", "BookEdition")
                        .WithMany("Readings")
                        .HasForeignKey("BookEditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reading_book_edition_book_edition_id");

                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reading_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reading_group_group_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Note", "Note")
                        .WithOne("Reading")
                        .HasForeignKey("Libellus.Infrastructure.Persistence.DataModels.Reading", "NoteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_reading_note_note_id");

                    b.Navigation("BookEdition");

                    b.Navigation("Group");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Series", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_series_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_series_groups_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Shelf", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_shelf_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shelf_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.ShelfBookConnector", b =>
                {
                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Book", "Book")
                        .WithMany("ShelfBookConnectors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shelf_book_connector_book_book_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Shelf", "Shelf")
                        .WithMany("ShelfBookConnectors")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shelf_book_connector_shelves_shelf_id");

                    b.Navigation("Book");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Tag", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_tag_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tag_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.WarningTag", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_warning_tag_asp_net_users_user_id");

                    b.HasOne("Libellus.Infrastructure.Persistence.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_warning_tag_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<Libellus.Domain.Common.Types.Ids.UserId>", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<Libellus.Domain.Common.Types.Ids.UserId>", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<Libellus.Domain.Common.Types.Ids.UserId>", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<Libellus.Domain.Common.Types.Ids.UserId>", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<Libellus.Domain.Common.Types.Ids.UserId>", b =>
                {
                    b.HasOne("Libellus.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Author", b =>
                {
                    b.Navigation("BookAuthorConnectors");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Book", b =>
                {
                    b.Navigation("BookAuthorConnectors");

                    b.Navigation("BookEditions");

                    b.Navigation("BookGenreConnectors");

                    b.Navigation("BookSeriesConnector");

                    b.Navigation("BookTagConnectors");

                    b.Navigation("BookWarningTagConnectors");

                    b.Navigation("ShelfBookConnectors");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.BookEdition", b =>
                {
                    b.Navigation("Readings");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Format", b =>
                {
                    b.Navigation("BookEditions");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Genre", b =>
                {
                    b.Navigation("BookGenreConnectors");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Group", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("Members");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.GroupRole", b =>
                {
                    b.Navigation("GroupUserMemberships");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Label", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Language", b =>
                {
                    b.Navigation("BookEditions");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.LiteratureForm", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Note", b =>
                {
                    b.Navigation("Reading")
                        .IsRequired();
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LockedPost");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Publisher", b =>
                {
                    b.Navigation("BookEditions");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Series", b =>
                {
                    b.Navigation("BookSeriesConnectors");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Shelf", b =>
                {
                    b.Navigation("ShelfBookConnectors");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.Tag", b =>
                {
                    b.Navigation("BookTagConnectors");
                });

            modelBuilder.Entity("Libellus.Infrastructure.Persistence.DataModels.WarningTag", b =>
                {
                    b.Navigation("BookWarningTagConnectors");
                });
#pragma warning restore 612, 618
        }
    }
}
