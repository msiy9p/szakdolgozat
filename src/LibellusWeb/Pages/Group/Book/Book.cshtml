@page "/Group/{gid:groupid}/Book/{bid:bookid}"
@using LibellusWeb.ViewModels
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using LibellusWeb.Models
@model LibellusWeb.Pages.Group.Book.BookModel
@{
    ViewData["Title"] = Model.Book.Title;
}

<div class="row d-flex">
    <div class="col-md-2">
        <partial name="Group/_SideNavPartial" model="Model.GroupId" />
    </div>
    
    <div class="col-md-10 align-items-center justify-content-center">

        <div class="container">
            <div class="row row-cols-3 gx-5">

                <div class="col-sm-2">

                    <partial name="Shared/_CoverImagePartial" model="new CoverImage(Model.CoverLinkBase, Model.Book.AvailableCovers, 250)"/>

                </div>

                <div class="col-sm-2"></div>

                <div class="col-sm">

                    <div class="card border-secondary mb-3">
                        <div class="card-header">
                            <h4>@Model.Book.Title.Value</h4>
                        </div>
                        <div class="card-body">@Model.Book.Description?.Value</div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">
                                @{
                                    foreach (var author in Model.Book.Authors)
                                    {
                                        var authorView = new Dictionary<string, string>
                                        {
                                            { "gid", Model.GroupId },
                                            { "aid", author.FriendlyId.Value },
                                        };
                                        <a asp-page="/Group/Author/Author" asp-all-route-data="authorView">
                                            <span class="badge p-1 big-badge rounded-pill text-bg-primary text-wrap">@author.Name.Value</span>
                                        </a>                                    }
                                }
                            </li>
                            <li class="list-group-item">
                                <div class="row">
                                    @{
                                        if (Model.Book.Series is not null && Model.Book.NumberInSeries.HasValue)
                                        {
                                            var seriesView = new Dictionary<string, string>
                                            {
                                                { "gid", Model.GroupId },
                                                { "seid", Model.Book.Series.FriendlyId.Value },
                                            };

                                            <a asp-page="/Group/Series/Series" asp-all-route-data="seriesView">
                                                <span class="badge p-1 big-badge rounded-pill text-bg-light text-wrap">@Model.Book.Series?.Title.Value - @Model.Book.NumberInSeries.ToString()</span>
                                            </a>
                                        }
                                    }
                                </div>
                            </li>
                            <li class="list-group-item">@Model.Book.LiteratureForm?.Name.Value</li>
                            <li class="list-group-item">
                                @{
                                    foreach (var genre in Model.Book.Genres)
                                    {
                                        var postfix = genre.IsFiction ? "(Fiction)" : "(Non-Fiction)";
                                        <span class="badge p-1 big-badge rounded-pill text-bg-secondary text-wrap">
                                            @genre.Name.Value<i class="ps-1">@postfix</i>
                                        </span>
                                    }
                                }
                            </li>
                            <li class="list-group-item">
                                @{
                                    foreach (var tag in Model.Book.Tags)
                                    {
                                        <span class="badge p-1 big-badge rounded-pill text-bg-secondary text-wrap">@tag.Name.Value</span>
                                    }
                                }
                            </li>
                            <li class="list-group-item">
                                @{
                                    foreach (var warningTag in Model.Book.WarningTags)
                                    {
                                        <span class="badge p-1 big-badge rounded-pill text-bg-warning text-wrap">@warningTag.Name.Value</span>
                                    }
                                }
                            </li>
                        </ul>
                        <div class="card-footer container text-center">
                            <div class="row">
                                <div class="col-sm">
                                    @{
                                        var datePrefix = Model.Book.CreatedOnUtc == Model.Book.ModifiedOnUtc ?
                                            "Created on" :
                                            "Modified on";

                                        var dateProper = Model.Book.CreatedOnUtc == Model.Book.ModifiedOnUtc ?
                                            Model.Book.CreatedOnUtc.ToDateTimeUtc().ToString("O") :
                                            Model.Book.ModifiedOnUtc.ToDateTimeUtc().ToString("O");
                                    }

                                    <small class="text-muted align-self-center">@datePrefix <span class="datetimerewrite">@dateProper</span></small>
                                </div>
                                @{
                                    if (true)
                                    {
                                        var bookEdit = new Dictionary<string, string>
                                        {
                                            { "gid", Model.GroupId },
                                            { "bid", Model.BookId },
                                        };

                                        <div class="col-sm">
                                            <a asp-page="/Group/Book/EditBook" asp-all-route-data="bookEdit" class="btn btn-warning">Edit book</a>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>

                </div>

            </div>
        </div>

        <partial name="Shared/_TopMarginGapPartial"/>

        <hr/>
        <div class="d-flex justify-content-between">
            @{
                var createRoute = new Dictionary<string, string>
                {
                    { "gid", Model.GroupId },
                    { "bid", Model.BookId },
                };
            }
            <h4>Book editions</h4><a asp-page="/Group/BookEdition/CreateBookEdition" asp-all-route-data="createRoute"><button class="btn btn-outline-success btn-sm" type="button">Create new book edition</button></a>
        </div>

        <partial name="Shared/_TopMarginGapPartial"/>

        <table class="table table-bordered table-striped table-hover">
            <thead>
            <tr>
                <partial name="Group/BookEdition/_BookEditionVmTableRowHeaderPartial"/>
            </tr>
            </thead>
            <tbody>
            @{
                foreach (var bookEdition in Model.Book.BookEditions)
                {
                    <tr>
                        <partial name="Group/BookEdition/_BookEditionVmTableRowPartial" model="new BookEditionVm(bookEdition, Model.GroupId, Model.CoverLinkBase, true)"/>
                    </tr>
                }
            }
        </table>

    </div>
</div>